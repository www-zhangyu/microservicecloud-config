server:
  port: 7001


# 下面的instance和client要在一条线上，否则报错
eureka:
  instance:
    hostname: eureka7001.com   # eureka server的实例名称
  client:
    register-with-eureka: false     #false表示不向注册中心注册自己。
    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    service-url:
      #defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。
      defaultZone: http://eureka7002.com:7002/eureka/   # 完成和eureka2002这个eureka server的相互注册
  server:
    enable-self-preservation: false  # 关闭自我保护机制


spring:
  profiles: dev
  application:
    name: microservicecloud-eurekaserver-config
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/springdemo
    driver-class-name: com.mysql.jdbc.Driver
    username: bmisAdmin
    password: qkxs@1234

---

server:
  port: 7001


# 下面的instance和client要在一条线上，否则报错
eureka:
  instance:
    hostname: eureka7001.com   # eureka server的实例名称
  client:
    register-with-eureka: false     #false表示不向注册中心注册自己。
    fetch-registry: false     #false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务
    service-url:
      #defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/       #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址（单机）。
      defaultZone: http://eureka7002.com:7002/eureka/   # 完成和eureka2002这个eureka server的相互注册
  server:
    enable-self-preservation: false  # 关闭自我保护机制


spring:
  profiles: dev
  application:
    name: microservicecloud-eurekaserver-config
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/springdemo
    driver-class-name: com.mysql.jdbc.Driver
    username: bmisAdmin
    password: qkxs@1234